{"version":3,"file":"static/js/186.0b0419ea.chunk.js","mappings":"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","sources":["components/Reviews/Reviews.jsx","services/FetchAPI.jsx"],"sourcesContent":["import { getMovieByReviews } from '../../services/FetchAPI';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Loader from '../Loader/Loader';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    const fetchDataReviews = async () => {\n      try {\n        const reviews = await getMovieByReviews(movieId);\n        setReviews(reviews);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchDataReviews();\n  }, [movieId]);\n\n  return (\n    <>\n      {loading ? (\n        <Loader />\n      ) : (\n        <ul>\n          {reviews.map(({ id, author, content }) => {\n            return (\n              <li key={id}>\n                <h2>Author: {author}</h2>\n                <p>Content: {content}</p>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","//KEY ➡️ 8a1b3ad75f8d6d96df0b528cd3b953bf\n//EXAMPLE ➡️ https://api.themoviedb.org/3/movie/550?api_key=8a1b3ad75f8d6d96df0b528cd3b953bf\n// BASE URL ➡️ https://api.themoviedb.org/3\n\nimport axios from 'axios';\n\nconst key = '8a1b3ad75f8d6d96df0b528cd3b953bf';\nconst URL = `https://api.themoviedb.org/3`;\nconst notFoundImageUrl = 'https://cdn-icons-png.flaticon.com/512/25/25634.png';\nexport const getPopularMovies = async () => {\n  try {\n    const response = await axios.get(\n      `${URL}/trending/movie/day?api_key=${key}&page=${1}`\n    );\n    const { results } = response.data;\n    const films = results.map(film => {\n      const { title, id, overview } = film;\n      return { title, id, overview };\n    });\n    return { films };\n  } catch (error) {\n    console.log(error);\n  }\n};\nconst getPosterSrc = url =>\n  url ? 'https://image.tmdb.org/t/p/w500' + url : notFoundImageUrl;\n\nexport const getMoviesById = async id => {\n  try {\n    const response = await axios.get(`${URL}/movie/${id}?api_key=${key}`);\n    const {\n      poster_path,\n      title,\n      release_date,\n      overview,\n      genres,\n      vote_average,\n      vote_count,\n      popularity,\n      original_title,\n    } = response.data;\n    return {\n      poster_path: getPosterSrc(poster_path),\n      title,\n      release_date,\n      overview,\n      genres:\n        genres &&\n        genres\n          .map(({ name }) => {\n            return name;\n          })\n          .join(' '),\n      vote_average,\n      vote_count,\n      popularity,\n      original_title,\n    };\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMoviesCast = async id => {\n  try {\n    const { data } = await axios.get(\n      `${URL}/movie/${id}/credits?api_key=${key}`\n    );\n\n    return data.cast.map(({ id, name, character, profile_path }) => ({\n      id,\n      name,\n      character,\n      profile_path: getPosterSrc(profile_path),\n    }));\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieByQuery = async query => {\n  try {\n    const { data } = await axios.get(\n      `${URL}/search/movie?api_key=${key}&query=${query}`\n    );\n    return data.results.map(({ id, title }) => ({ id, title }));\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieByReviews = async id => {\n  try {\n    const { data } = await axios.get(\n      `${URL}/movie/${id}/reviews?api_key=${key}`\n    );\n    return data.results.map(({ id, author, content }) => ({\n      id,\n      author,\n      content,\n    }));\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"names":["movieId","useParams","useState","reviews","setReviews","loading","setLoading","useEffect","fetchDataReviews","getMovieByReviews","console","log","map","id","author","content","key","URL","getPopularMovies","axios","response","results","data","films","film","title","overview","getPosterSrc","url","getMoviesById","poster_path","release_date","genres","vote_average","vote_count","popularity","original_title","name","join","getMoviesCast","cast","character","profile_path","getMovieByQuery","query"],"sourceRoot":""}