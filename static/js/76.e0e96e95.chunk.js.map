{"version":3,"file":"static/js/76.e0e96e95.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx","services/FetchAPI.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"img\":\"Cast_img__-isbW\",\"list\":\"Cast_list__GlWio\"};","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { getMoviesCast } from '../../services/FetchAPI';\nimport css from './Cast.module.css';\nimport Loader from '../Loader/Loader';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    const fetchDataCast = async () => {\n      try {\n        const cast = await getMoviesCast(movieId);\n        setCast(cast);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchDataCast();\n  }, [movieId]);\n\n  return (\n    <>\n      {loading ? (\n        <Loader />\n      ) : (\n        <ul className={css.list}>\n          {cast.map(({ id, name, character, profile_path }) => {\n            return (\n              <li key={id}>\n                <img className={css.img} src={profile_path} alt={name} />\n                <h2>{name}</h2>\n                <p>Character: {character}</p>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","//KEY ➡️ 8a1b3ad75f8d6d96df0b528cd3b953bf\n//EXAMPLE ➡️ https://api.themoviedb.org/3/movie/550?api_key=8a1b3ad75f8d6d96df0b528cd3b953bf\n// BASE URL ➡️ https://api.themoviedb.org/3\n\nimport axios from 'axios';\n\nconst key = '8a1b3ad75f8d6d96df0b528cd3b953bf';\nconst URL = `https://api.themoviedb.org/3`;\nconst notFoundImageUrl = 'https://cdn-icons-png.flaticon.com/512/25/25634.png';\nexport const getPopularMovies = async () => {\n  try {\n    const response = await axios.get(\n      `${URL}/trending/movie/day?api_key=${key}&page=${1}`\n    );\n    const { results } = response.data;\n    const films = results.map(film => {\n      const { title, id, overview } = film;\n      return { title, id, overview };\n    });\n    return { films };\n  } catch (error) {\n    console.log(error);\n  }\n};\nconst getPosterSrc = url =>\n  url ? 'https://image.tmdb.org/t/p/w500' + url : notFoundImageUrl;\n\nexport const getMoviesById = async id => {\n  try {\n    const response = await axios.get(`${URL}/movie/${id}?api_key=${key}`);\n    const {\n      poster_path,\n      title,\n      release_date,\n      overview,\n      genres,\n      vote_average,\n      vote_count,\n      popularity,\n      original_title,\n    } = response.data;\n    return {\n      poster_path: getPosterSrc(poster_path),\n      title,\n      release_date,\n      overview,\n      genres:\n        genres &&\n        genres\n          .map(({ name }) => {\n            return name;\n          })\n          .join(' '),\n      vote_average,\n      vote_count,\n      popularity,\n      original_title,\n    };\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMoviesCast = async id => {\n  try {\n    const { data } = await axios.get(\n      `${URL}/movie/${id}/credits?api_key=${key}`\n    );\n\n    return data.cast.map(({ id, name, character, profile_path }) => ({\n      id,\n      name,\n      character,\n      profile_path: getPosterSrc(profile_path),\n    }));\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieByQuery = async query => {\n  try {\n    const { data } = await axios.get(\n      `${URL}/search/movie?api_key=${key}&query=${query}`\n    );\n    return data.results.map(({ id, title }) => ({ id, title }));\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieByReviews = async id => {\n  try {\n    const { data } = await axios.get(\n      `${URL}/movie/${id}/reviews?api_key=${key}`\n    );\n    return data.results.map(({ id, author, content }) => ({\n      id,\n      author,\n      content,\n    }));\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"names":["movieId","useParams","useState","cast","setCast","loading","setLoading","useEffect","fetchDataCast","getMoviesCast","console","log","Loader","className","css","map","id","name","character","profile_path","src","alt","key","URL","getPopularMovies","axios","response","results","data","films","film","title","overview","getPosterSrc","url","getMoviesById","poster_path","release_date","genres","vote_average","vote_count","popularity","original_title","join","getMovieByQuery","query","getMovieByReviews","author","content"],"sourceRoot":""}